---
import type { HTMLAttributes } from "astro/types";
import { iconPaths } from "./IconPaths";

// Importa las bibliotecas necesarias de react-icons
import * as FaIcons from "react-icons/fa";
import * as SiIcons from "react-icons/si";
import * as MdIcons from "react-icons/md";
import * as AiIcons from "react-icons/ai";

interface Props {
  icon: keyof typeof iconPaths | string; // Puede ser un SVG o el nombre de un ícono de react-icons
  library?: "fa" | "si" | "md" | "ai"; // Opcional: especificar la biblioteca
  color?: string;
  size?: string;
  gradient?: boolean; // Si usa gradientes para SVG
}

const { color = "currentcolor", gradient, icon, size, library } = Astro.props;

// Mapear las bibliotecas
const reactIconLibraries = {
  fa: FaIcons,
  si: SiIcons,
  md: MdIcons,
  ai: AiIcons,
};

// Verifica si el ícono es de react-icons
const isReactIcon = library && icon in reactIconLibraries[library];

// Si es un SVG, busca el path; de lo contrario, selecciona el componente de react-icons
const iconPath = !isReactIcon
  ? iconPaths[icon as keyof typeof iconPaths]
  : null;
const IconComponent = isReactIcon
  ? (reactIconLibraries[library] as any)[icon]
  : null;

// Atributos para el tamaño
const attrs: HTMLAttributes<"svg" | "div"> = {};
if (size) attrs.style = { "--size": size };

// ID único para el gradiente
const gradientId =
  "icon-gradient-" + Math.round(Math.random() * 10e12).toString(36);
---

{
  !isReactIcon ? (
    // Renderiza un ícono SVG
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="40"
      height="40"
      viewBox="0 0 256 256"
      aria-hidden="true"
      stroke={gradient ? `url(#${gradientId})` : color}
      fill={gradient ? `url(#${gradientId})` : color}
      {...attrs}
    >
      <g set:html={iconPath} />
      {gradient && (
        <linearGradient
          id={gradientId}
          x1="23"
          x2="235"
          y1="43"
          y2="202"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-color="var(--gradient-stop-1)" />
          <stop offset=".5" stop-color="var(--gradient-stop-2)" />
          <stop offset="1" stop-color="var(--gradient-stop-3)" />
        </linearGradient>
      )}
    </svg>
  ) : (
    // Renderiza un ícono de react-icons
    <div {...attrs}>
      <IconComponent color={color} style={{ width: "100%", height: "100%" }} />
    </div>
  )
}

<style>
  svg,
  div {
    vertical-align: middle;
    width: var(--size, 1em);
    height: var(--size, 1em);
  }
</style>
